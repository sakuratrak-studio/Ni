// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ni.Data;

namespace Ni.Migrations
{
    [DbContext(typeof(NiDbContext))]
    [Migration("20190725062152_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ni.Models.NiComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CommentWebsiteId");

                    b.Property<string>("Content");

                    b.Property<int?>("ReplyParentId");

                    b.Property<DateTimeOffset>("SendTime");

                    b.Property<string>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("CommentWebsiteId");

                    b.HasIndex("ReplyParentId");

                    b.HasIndex("SenderId");

                    b.ToTable("NiComments");
                });

            modelBuilder.Entity("Ni.Models.NiCommentWebsite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AllowOrigin");

                    b.Property<DateTimeOffset>("CreateTime");

                    b.Property<string>("Name");

                    b.Property<string>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("NiWebsites");
                });

            modelBuilder.Entity("Ni.Models.NiUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("AccountCreateTime");

                    b.Property<string>("Bio");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("HeadImgFileKey");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NickName");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PreferedLanguage");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Sex");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("NiUsers");
                });

            modelBuilder.Entity("Ni.Models.NiComment", b =>
                {
                    b.HasOne("Ni.Models.NiCommentWebsite", "CommentWebsite")
                        .WithMany("Comments")
                        .HasForeignKey("CommentWebsiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ni.Models.NiComment", "ReplyParent")
                        .WithMany()
                        .HasForeignKey("ReplyParentId");

                    b.HasOne("Ni.Models.NiUser", "Sender")
                        .WithMany("Comments")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Ni.Models.NiCommentWebsite", b =>
                {
                    b.HasOne("Ni.Models.NiUser", "Owner")
                        .WithMany("CommentWebsites")
                        .HasForeignKey("OwnerId");
                });
#pragma warning restore 612, 618
        }
    }
}
